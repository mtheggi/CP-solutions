class SparseTable  {
private :
    vector<vector<long long >> Sparse_table ;
    vector<int> lg;
    vector<long long>array ;
    int _size ;
    string type;
    /*
    type = "min"  for min query
    type = "max"  for max query
    type = "gcd"  for gcd query
 */
public:
    SparseTable(int n , string type , vector<long long> & array){
        Sparse_table.resize(log2(n)+3 , vector<long long>( n +2 , 0 )) ;
        this->type = type ;
        this->array = array;
        _size = n ;
        lg.resize(n+2 );
        build();
    }
    void buildlg(){
        lg[1] = 0 ;
        for(int i=2 ;i<=_size ; i++) lg[i] = lg[i/2] +1 ;;
    }
    void build(){
        buildlg();
        for(int i =  0 ; i < _size; i++ ) Sparse_table[0][i]= array[i] ;
        for(int i = 1 ;(1<<i)<= _size ; i++){
            for(int j = 0 ; (j + (1<<i) )<= _size ; j++){
                Sparse_table[i][j] = merge(Sparse_table[i-1][j] , Sparse_table[i-1][j+(1<<(i-1))]);
            }
        }
    }
    long long merge(long long a, long long  b) {
        if(type == "min") return min(a , b) ;
        if(type == "max") return max(a , b) ;
        if(type == "gcd") return __gcd(a , b) ;
    }
    long long Query(int l , int r ){
        int k = lg[r-l+1];
        return merge(Sparse_table[k][l]  , Sparse_table[k][r-(1<<k)+1] );
    }
};

